"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '43(i&#^1h!ekwn3p%1k+*%fu7son$ya-nhpqn((rbd2h#n!^5@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap3',
    'web',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'django_project/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'django_project/asserts'),
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'django_project/media')

DEFAULT_WEIBO_CAPTURE_IMAGE = "common/images/default_weibo_capture.jpg"

SINA_WEIBO_USERNAME = 'xiaopengyou@live.com'
SINA_WEIBO_PASSWORD = 'weibo2b'
SINA_WEIBO_LOGIN_REDIRECT_PAGE = 'http://weibo.com/lovemyliwu/home'

CHROME_USER_DATA_DIR_POOL_SIZE = 3
CHROME_USER_DATA_DIR_POOL = []
CHROME_RESOURCE_LOCKS = []
for idx in xrange(CHROME_USER_DATA_DIR_POOL_SIZE):
    CHROME_USER_DATA_DIR_POOL.append(os.path.join(BASE_DIR, 'django_project/chrome_data/user' + str(idx + 1)))
    CHROME_RESOURCE_LOCKS.append('CHROME_LOCK' + str(idx + 1))
CHROME_HOME_PAGE = 'chrome://newtab'
CHROME_RESOURCE_LOCK_TIME = 60 * 60

CACHES = {
    'default': {
        'BACKEND': 'redis_lock.django_cache.RedisCache',
        'LOCATION': '127.0.0.1:6379',
        'OPTIONS': {
            'DB': 1
        }
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s|%(name)s|%(levelname)s] %(message)s",
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
    },
    'loggers': {
    }
}

JQUERY_JS_FILE = os.path.join(BASE_DIR, 'django_project/asserts/common/libs/jquery2/jquery-2.2.0.min.js')

# redirect all log to console
import logging
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(logging.Formatter('[%(asctime)s|%(name)s|%(levelname)s] %(message)s', "%Y-%m-%d %H:%M:%S"))
root_logger = logging.getLogger()
root_logger.setLevel(os.environ.get('LOGGER_LEVEL', logging.DEBUG if DEBUG else logging.ERROR))
root_logger.addHandler(stream_handler)
